AWSTemplateFormatVersion: '2010-09-09'
Description: 'Kafka Webhook Bridge Service Stack'

Parameters:
  Stage:
    Type: String
    Description: The stage this stack is for (dev, staging, prod)
  DeploymentTimestamp:
    Type: Number
    Description: Timestamp of the deployment, used for unique broker IDs
  BrokerId:
    Type: Number
    Description: Unique broker ID for Kafka (must be less than 2147483647)
  ContainerCpu:
    Type: Number
    Default: 512
    Description: Container CPU units (512 = 0.5 vCPU)
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: Container memory (MB)
  DomainName:
    Type: String
    Description: Domain name for the service
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID
  WebhookImageTag:
    Type: String
    Description: Docker image tag for the webhook service
  WebhookUsername:
    Type: String
    Description: Username for webhook authentication
  WebhookPassword:
    Type: String
    NoEcho: true
    Description: Password for webhook authentication
  KafkaUsername:
    Type: String
    Description: Username for Kafka authentication
  KafkaPassword:
    Type: String
    NoEcho: true
    Description: Password for Kafka authentication
  KafkaExternalPort:
    Type: Number
    Default: 29095
    Description: External port for Kafka connections
  KafkaInternalDnsName:
    Type: String
    Description: Internal DNS name for the Kafka container (used by the webhook)
  KafkaImage:
    Type: String
    Default: bitnami/kafka:3.7
    Description: Docker image for Kafka

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (for ALB/NLB)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-2

  # Private Subnets (for ECS)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-rt-1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-rt-2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # VPC Endpoints for ECR and other AWS services
  ECRAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ecr:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECRDKREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ecr:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource: '*'
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2

  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'logs:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ssm:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ecs:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECSAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-agent
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ecs:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECSTelemetryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-telemetry
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'ecs:*'
            Resource: '*'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt VPC.CidrBlock

  # SSL Certificate
  WebhookCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "webhooks.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "webhooks.${DomainName}"
          HostedZoneId: !Ref HostedZoneId

  KafkaCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "kafka.${DomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "kafka.${DomainName}"
          HostedZoneId: !Ref HostedZoneId

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for webhook ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kafka NLB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref KafkaExternalPort
          ToPort: !Ref KafkaExternalPort
          CidrIp: 0.0.0.0/0

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kafka
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9095
          ToPort: 9095
          # CidrIp: !GetAtt VPC.CidrBlock  # Allow from VPC CIDR for NLB health checks
          SourceSecurityGroupId: !Ref NLBSecurityGroup
        - IpProtocol: tcp
          FromPort: 9094
          ToPort: 9094
          SourceSecurityGroupId: !Ref WebhookSecurityGroup

  WebhookSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Webhook service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Application Load Balancer (for webhooks)
  WebhookLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stage}-webhooks-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  WebhookListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebhookLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref WebhookCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebhookTargetGroup

  WebhookTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stage}-webhooks-tg
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # Network Load Balancer (for Kafka)
  KafkaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stage}-webhooks-kafka-nlb
      Scheme: internet-facing
      Type: network
      SecurityGroups:
        - !Ref NLBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  KafkaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref KafkaLoadBalancer
      Port: !Ref KafkaExternalPort
      Protocol: TLS
      Certificates:
        - CertificateArn: !Ref KafkaCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KafkaTargetGroup
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  KafkaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stage}-webhooks-kafka-tg
      Port: 9095
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPort: 9095
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 20

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Stage}-webhooks-cluster

  # Service Discovery
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "${Stage}.webhooks-bridge.local"
      Vpc: !Ref VPC
      Description: Private DNS namespace for service discovery

  KafkaServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    DependsOn: ServiceDiscoveryNamespace
    Properties:
      Name: kafka-internal
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # Additional DNS records for services
  WebhookDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "webhooks.${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebhookLoadBalancer.DNSName
        HostedZoneId: !GetAtt WebhookLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: true

  KafkaDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "kafka.${DomainName}."
      Type: A
      AliasTarget:
        DNSName: !GetAtt KafkaLoadBalancer.DNSName
        HostedZoneId: !GetAtt KafkaLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: true

  # Add EFS Security Group after existing security groups
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.100.0.0/16  # VPC CIDR block

  # Add EFS FileSystem resources before Task Definitions
  KafkaFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-kafka-data

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref KafkaFileSystem
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref PrivateSubnet1

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref KafkaFileSystem
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref PrivateSubnet2

  KafkaAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref KafkaFileSystem
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        Path: "/kafka-data"
        CreationInfo:
          OwnerUid: "1001"
          OwnerGid: "1001"
          Permissions: "775"

  # Task Definitions
  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Stage}-webhooks-kafka
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Volumes:
        - Name: kafka-data
          EFSVolumeConfiguration:
            FilesystemId: !Ref KafkaFileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref KafkaAccessPoint
              IAM: ENABLED
      ContainerDefinitions:
        - Name: kafka
          Image: !Ref KafkaImage
          Essential: true
          PortMappings:
            - ContainerPort: 9092
              Protocol: tcp
            - ContainerPort: 9093
              Protocol: tcp
            - ContainerPort: 9094
              Protocol: tcp
            - ContainerPort: 9095
              Protocol: tcp
          HealthCheck:
            Command:
              - CMD-SHELL
              - kafka-topics.sh --bootstrap-server localhost:9092 --list
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60
          Environment:
            - Name: ALLOW_PLAINTEXT_LISTENER
              Value: "yes"
            - Name: KAFKA_ENABLE_KRAFT
              Value: "yes"
            - Name: KAFKA_CFG_PROCESS_ROLES
              Value: "broker,controller"
            - Name: KAFKA_CFG_NODE_ID
              Value: !Sub "${DeploymentTimestamp}"
            - Name: KAFKA_BROKER_ID
              Value: !Ref BrokerId
            - Name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              Value: "1@127.0.0.1:9093"
            - Name: KAFKA_CFG_LISTENERS
              Value: "BROKER://0.0.0.0:9092,CONTROLLER://:9093,INTERNAL://0.0.0.0:9094,PROXY://0.0.0.0:9095"
            - Name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              Value: "BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,PROXY:SASL_PLAINTEXT"
            - Name: KAFKA_CFG_ADVERTISED_LISTENERS
              Value: !Sub "BROKER://${KafkaInternalDnsName}:9092,INTERNAL://${KafkaInternalDnsName}:9094,PROXY://kafka.${DomainName}:${KafkaExternalPort}"
            - Name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              Value: "CONTROLLER"
            - Name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              Value: "BROKER"
            - Name: KAFKA_CFG_SASL_ENABLED
              Value: "true"
            - Name: KAFKA_CFG_SASL_ENABLED_MECHANISMS
              Value: "PLAIN"
            - Name: KAFKA_CFG_SASL_MECHANISM
              Value: "PLAIN"
            - Name: KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL
              Value: "PLAIN"
            - Name: KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL
              Value: "PLAIN"
            - Name: KAFKA_CFG_SECURITY_PROTOCOL
              Value: "SASL_PLAINTEXT"
            - Name: KAFKA_CLIENT_USERS
              Value: !Ref KafkaUsername
            - Name: KAFKA_CLIENT_PASSWORDS
              Value: !Ref KafkaPassword
            - Name: BITNAMI_DEBUG
              Value: "true"
            - Name: KAFKA_CFG_AUTO_OFFSET_RESET
              Value: "earliest"
            # Additional AWS-specific configurations
            - Name: KAFKA_CFG_LOG_DIRS
              Value: "/bitnami/kafka/data"
            - Name: KAFKA_KRAFT_CLUSTER_ID
              Value: "DkehYBuuTnKBBK2WrZx3yw"
            - Name: KAFKA_CFG_CONTROLLED_SHUTDOWN_ENABLE
              Value: "true"
            - Name: KAFKA_CFG_AUTO_LEADER_REBALANCE_ENABLE
              Value: "true"
            - Name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              Value: "true"
            - Name: KAFKA_HEAP_OPTS
              Value: "-Xmx512m -Xms256m"
            - Name: KAFKA_CFG_FILE_DELETE_DELAY_MS
              Value: "1000"
            - Name: KAFKA_CFG_CONTROLLED_SHUTDOWN_MAX_RETRIES
              Value: "3"
            - Name: KAFKA_CFG_CONTROLLED_SHUTDOWN_RETRY_BACKOFF_MS
              Value: "5000"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kafka
          MountPoints:
            - SourceVolume: kafka-data
              ContainerPath: "/bitnami/kafka"
              ReadOnly: false
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
          EntryPoint:
            - /bin/bash
            - -c
            - !Sub |
              # Debug: Print environment variables
              echo "Environment variables:"
              echo "KafkaUsername: ${KafkaUsername}"
              echo "KafkaPassword: [hidden for security]"

              # Remove any stale lock files before starting Kafka
              echo "Cleaning up any stale lock files..."
              rm -f /bitnami/kafka/data/.lock

              # Start Kafka with the regular command
              echo "Starting Kafka server..."
              /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh

  # ECS Services
  KafkaService:
    Type: AWS::ECS::Service
    DependsOn:
      - KafkaListener
      - KafkaServiceDiscovery
    Properties:
      ServiceName: !Sub ${Stage}-webhooks-kafka
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref KafkaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 300
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref KafkaTargetGroup
          ContainerName: kafka
          ContainerPort: 9095
      ServiceRegistries:
        - RegistryArn: !GetAtt KafkaServiceDiscovery.Arn

  WebhookTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Stage}-webhooks-service
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: webhook
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kafka-webhook-bridge:${WebhookImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: WEBHOOK_USERNAME
              Value: !Ref WebhookUsername
            - Name: WEBHOOK_PASSWORD
              Value: !Ref WebhookPassword
            - Name: KAFKA_BROKERS
              Value: !Sub "${KafkaInternalDnsName}:9094"
            - Name: KAFKA_BROKER_USERNAME
              Value: !Ref KafkaUsername
            - Name: KAFKA_BROKER_PASSWORD
              Value: !Ref KafkaPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: webhook

  WebhookService:
    Type: AWS::ECS::Service
    DependsOn:
      - WebhookListener
      - WebhookTaskDefinition
      - KafkaService
    Properties:
      ServiceName: !Sub ${Stage}-webhooks-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebhookTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref WebhookSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref WebhookTargetGroup
          ContainerName: webhook
          ContainerPort: 3000

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EFSAccessForTaskExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource:
                  - !GetAtt KafkaFileSystem.Arn
                  - !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${KafkaAccessPoint}"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource:
                  - !GetAtt KafkaFileSystem.Arn
                  - !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${KafkaAccessPoint}"

  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${Stage}-webhooks
      RetentionInDays: 30

  # Allow Kafka security group to access EFS
  KafkaToEFSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref KafkaSecurityGroup

Outputs:
  WebhookEndpoint:
    Description: Webhook endpoint URL
    Value: !Sub https://webhooks.${DomainName}
  KafkaEndpoint:
    Description: Kafka endpoint URL
    Value: !Sub kafka.${DomainName}:${KafkaExternalPort}
  WebhookLoadBalancerDNS:
    Description: Webhook Load Balancer DNS name
    Value: !GetAtt WebhookLoadBalancer.DNSName
  KafkaLoadBalancerDNS:
    Description: Kafka Load Balancer DNS name
    Value: !GetAtt KafkaLoadBalancer.DNSName
  WebhookDNSName:
    Description: Webhook DNS name
    Value: !Sub "webhooks.${DomainName}"
  KafkaDNSName:
    Description: Kafka DNS name
    Value: !Sub "kafka.${DomainName}"
  KafkaFileSystemId:
    Description: Kafka EFS File System ID
    Value: !Ref KafkaFileSystem