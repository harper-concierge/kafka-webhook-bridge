AWSTemplateFormatVersion: '2010-09-09'
Description: 'Kafka Webhook Bridge Service Stack'

Parameters:
  Stage:
    Type: String
    Description: The stage this stack is for (dev, staging, prod)
  ContainerCpu:
    Type: Number
    Default: 512
    Description: Container CPU units (512 = 0.5 vCPU)
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: Container memory (MB)
  DomainName:
    Type: String
    Description: Domain name for the service
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID
  WebhookImageTag:
    Type: String
    Description: Docker image tag for the webhook service
  WebhookUsername:
    Type: String
    Description: Username for webhook authentication
  WebhookPassword:
    Type: String
    NoEcho: true
    Description: Password for webhook authentication
  KafkaUsername:
    Type: String
    Description: Username for Kafka authentication
  KafkaPassword:
    Type: String
    NoEcho: true
    Description: Password for Kafka authentication
  KafkaExternalPort:
    Type: Number
    Default: 29095
    Description: External port for Kafka connections

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (for ALB/NLB)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-2

  # Private Subnets (for ECS)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.100.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-rt-1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage}-webhooks-private-rt-2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # SSL Certificate
  WebhookCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for webhook ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kafka NLB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref KafkaExternalPort
          ToPort: !Ref KafkaExternalPort
          CidrIp: 0.0.0.0/0

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kafka
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9095
          SourceSecurityGroupId: !Ref NLBSecurityGroup

  # Application Load Balancer (for webhooks)
  WebhookLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stage}-webhooks-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  WebhookListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebhookLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref WebhookCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebhookTargetGroup

  WebhookTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stage}-webhooks-tg
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # Network Load Balancer (for Kafka)
  KafkaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stage}-webhooks-kafka-nlb
      Scheme: internet-facing
      Type: network
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  KafkaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref KafkaLoadBalancer
      Port: !Ref KafkaExternalPort
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KafkaTargetGroup

  KafkaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stage}-webhooks-kafka-tg
      Port: 9095
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 9095
      HealthCheckProtocol: TCP

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Stage}-webhooks-cluster

  # Task Definitions
  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Stage}-webhooks-kafka
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: kafka
          Image: bitnami/kafka:3.6
          Essential: true
          PortMappings:
            - ContainerPort: 9093
              Protocol: tcp
            - ContainerPort: 9094
              Protocol: tcp
            - ContainerPort: 9095
              Protocol: tcp
          Environment:
            - Name: ALLOW_PLAINTEXT_LISTENER
              Value: "yes"
            - Name: KAFKA_ENABLE_KRAFT
              Value: "yes"
            - Name: KAFKA_CFG_PROCESS_ROLES
              Value: "broker,controller"
            - Name: KAFKA_CFG_NODE_ID
              Value: "1"
            - Name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              Value: "1@127.0.0.1:9093"
            - Name: KAFKA_CFG_LISTENERS
              Value: "CONTROLLER://:9093,INTERNAL://0.0.0.0:9094,BROKER://0.0.0.0:9095,PROXY://0.0.0.0:9096"
            - Name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              Value: "CONTROLLER:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,BROKER:SASL_PLAINTEXT,PROXY:SASL_PLAINTEXT"
            - Name: KAFKA_CFG_ADVERTISED_LISTENERS
              Value: !Sub "INTERNAL://${KafkaService.Name}.${ECSCluster.Name}.internal:9094,BROKER://${KafkaService.Name}.${ECSCluster.Name}.internal:9095,PROXY://${KafkaLoadBalancer.DNSName}:${KafkaExternalPort}"
            - Name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              Value: "CONTROLLER"
            - Name: KAFKA_CFG_SASL_ENABLED_MECHANISMS
              Value: "PLAIN"
            - Name: KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL
              Value: "PLAIN"
            - Name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              Value: "BROKER"
            - Name: KAFKA_CFG_LISTENER_NAME_INTERNAL_SASL_JAAS_CONFIG
              Value: !Sub "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${KafkaUsername}\" password=\"${KafkaPassword}\";"
            - Name: KAFKA_CFG_LISTENER_NAME_BROKER_SASL_JAAS_CONFIG
              Value: !Sub "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${KafkaUsername}\" password=\"${KafkaPassword}\";"
            - Name: KAFKA_CFG_LISTENER_NAME_PROXY_SASL_JAAS_CONFIG
              Value: !Sub "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"${KafkaUsername}\" password=\"${KafkaPassword}\";"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kafka

  WebhookTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Stage}-webhooks-service
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: webhook
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/webhook-bridge:${WebhookImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: WEBHOOK_USERNAME
              Value: !Ref WebhookUsername
            - Name: WEBHOOK_PASSWORD
              Value: !Ref WebhookPassword
            - Name: KAFKA_BROKERS
              Value: !Sub "${KafkaService.Name}.${ECSCluster.Name}.internal:9094"
            - Name: KAFKA_USERNAME
              Value: !Ref KafkaUsername
            - Name: KAFKA_PASSWORD
              Value: !Ref KafkaPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: webhook

  # ECS Services
  KafkaService:
    Type: AWS::ECS::Service
    DependsOn: KafkaListener
    Properties:
      ServiceName: !Sub ${Stage}-webhooks-kafka
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref KafkaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref KafkaTargetGroup
          ContainerName: kafka
          ContainerPort: 9095

  WebhookService:
    Type: AWS::ECS::Service
    DependsOn: WebhookListener
    Properties:
      ServiceName: !Sub ${Stage}-webhooks-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebhookTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref KafkaSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref WebhookTargetGroup
          ContainerName: webhook
          ContainerPort: 3000

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # CloudWatch Logs
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${Stage}-webhooks
      RetentionInDays: 30

Outputs:
  WebhookEndpoint:
    Description: Webhook endpoint URL
    Value: !Sub https://webhooks.${DomainName}
  KafkaEndpoint:
    Description: Kafka endpoint URL
    Value: !Sub kafka.${DomainName}:${KafkaExternalPort}
  LoadBalancerDNS:
    Description: Load Balancer DNS name
    Value: !GetAtt WebhookLoadBalancer.DNSName 