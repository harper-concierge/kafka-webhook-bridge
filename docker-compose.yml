services:
  nginx-proxy-kafka:
    image: nginxproxy/nginx-proxy:1.7-alpine
    container_name: nginx-proxy-kafka
    ports:
      - "80:80"
      - "29095:29095"
      - "443:443"
    volumes:
      - ${PWD}/nginx/certs:/etc/nginx/certs:delegated
      - ${PWD}/nginx/toplevel.conf.d:/etc/nginx/toplevel.conf.d:delegated
      - /var/run/docker.sock:/tmp/docker.sock:ro
    restart: unless-stopped
    environment:
      TRUST_DOWNSTREAM_PROXY: false
    networks:
      webhook-network:
        aliases:
          - webhooks.harperconcierge.dev
          - kafka.harperconcierge.dev

  kafka:
    image: bitnami/kafka:3.6
    platform: linux/arm64
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
      - "9095:9095"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_LISTENERS=BROKER://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094,PROXY://0.0.0.0:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT,PROXY:SASL_PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=BROKER://kafka:9092,EXTERNAL://kafka:9094,PROXY://kafka.harperconcierge.dev:29095
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - KAFKA_CFG_SASL_ENABLED=true
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
      - KAFKA_CFG_SECURITY_PROTOCOL=SASL_PLAINTEXT
      - KAFKA_CFG_SASL_MECHANISM=PLAIN
      - KAFKA_CFG_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_BROKER_USERNAME}" password="${KAFKA_BROKER_PASSWORD}";
      - KAFKA_CFG_LISTENER_NAME_BROKER_PLAIN_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_BROKER_USERNAME}" password="${KAFKA_BROKER_PASSWORD}" user_${KAFKA_BROKER_USERNAME}="${KAFKA_BROKER_PASSWORD}";
      - KAFKA_CFG_LISTENER_NAME_EXTERNAL_PLAIN_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_BROKER_USERNAME}" password="${KAFKA_BROKER_PASSWORD}" user_${KAFKA_BROKER_USERNAME}="${KAFKA_BROKER_PASSWORD}";
      - KAFKA_CFG_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_BROKER_USERNAME}" password="${KAFKA_BROKER_PASSWORD}" user_${KAFKA_BROKER_USERNAME}="${KAFKA_BROKER_PASSWORD}";
      - KAFKA_CFG_LISTENER_NAME_PROXY_PLAIN_SASL_JAAS_CONFIG=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_BROKER_USERNAME}" password="${KAFKA_BROKER_PASSWORD}" user_${KAFKA_BROKER_USERNAME}="${KAFKA_BROKER_PASSWORD}";
      - BITNAMI_DEBUG=true
    volumes:
      - kafka_data:/bitnami
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: always

  webhook:
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:9094
      - KAFKA_CLIENT_ID=kafka-webhook-bridge
      - KAFKA_BROKER_USERNAME=${KAFKA_BROKER_USERNAME}
      - KAFKA_BROKER_PASSWORD=${KAFKA_BROKER_PASSWORD}
      - WEBHOOK_USERNAME=${WEBHOOK_USERNAME:-webhook}
      - WEBHOOK_PASSWORD=${WEBHOOK_PASSWORD:-webhook}
      - PORT=3000
      - VIRTUAL_HOST=webhooks.harperconcierge.dev
      - VIRTUAL_PORT=3000
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  webhook-network:
    driver: bridge

volumes:
  zookeeper_data:
  kafka_data:
